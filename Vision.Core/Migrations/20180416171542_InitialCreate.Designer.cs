// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Vision.Core.Database;

namespace Vision.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180416171542_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.Classification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Accelerator");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PayPeriodId");

                    b.Property<decimal>("Spiff");

                    b.HasKey("Id");

                    b.HasIndex("PayPeriodId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.PayPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("PayPeriods");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PayPeriodId");

                    b.Property<int?>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayPeriodId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CommissionAmount");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<Guid?>("SaleId");

                    b.Property<string>("Sku");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaLeaderId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AreaLeaderId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.CorporateOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CloseDate");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("OfficeManagerId");

                    b.Property<DateTime>("OpenDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OfficeManagerId");

                    b.ToTable("CorporateOffice");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DistrictLeaderId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictLeaderId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionLeaderId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RegionLeaderId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.RetailStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CloseDate");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenDate");

                    b.Property<int?>("StoreLeaderId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StoreLeaderId");

                    b.ToTable("RetailStores");
                });

            modelBuilder.Entity("Vision.Core.Models.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassificationId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<decimal>("ProductCost");

                    b.Property<decimal>("RetailPrice");

                    b.Property<string>("Sku");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Vision.Core.Models.User.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Vision.Core.Models.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CorporateOfficeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("RetailStoreId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CorporateOfficeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RetailStoreId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vision.Core.Models.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.Classification", b =>
                {
                    b.HasOne("Vision.Core.Models.Commissions.PayPeriod", "PayPeriod")
                        .WithMany()
                        .HasForeignKey("PayPeriodId");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.Sale", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Vision.Core.Models.Commissions.PayPeriod", "PayPeriod")
                        .WithMany()
                        .HasForeignKey("PayPeriodId");

                    b.HasOne("Vision.Core.Models.Locations.RetailStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Vision.Core.Models.Commissions.SaleItem", b =>
                {
                    b.HasOne("Vision.Core.Models.Commissions.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.Area", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "AreaLeader")
                        .WithMany()
                        .HasForeignKey("AreaLeaderId");

                    b.HasOne("Vision.Core.Models.Locations.Company")
                        .WithMany("Areas")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.CorporateOffice", b =>
                {
                    b.HasOne("Vision.Core.Models.Locations.Company")
                        .WithMany("CorporateOffices")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "OfficeManager")
                        .WithMany()
                        .HasForeignKey("OfficeManagerId");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.District", b =>
                {
                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "DistrictLeader")
                        .WithMany()
                        .HasForeignKey("DistrictLeaderId");

                    b.HasOne("Vision.Core.Models.Locations.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.Region", b =>
                {
                    b.HasOne("Vision.Core.Models.Locations.Area", "Area")
                        .WithMany("Regions")
                        .HasForeignKey("AreaId");

                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "RegionLeader")
                        .WithMany()
                        .HasForeignKey("RegionLeaderId");
                });

            modelBuilder.Entity("Vision.Core.Models.Locations.RetailStore", b =>
                {
                    b.HasOne("Vision.Core.Models.Locations.District", "District")
                        .WithMany("RetailStores")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Vision.Core.Models.User.ApplicationUser", "StoreLeader")
                        .WithMany()
                        .HasForeignKey("StoreLeaderId");
                });

            modelBuilder.Entity("Vision.Core.Models.Products.Product", b =>
                {
                    b.HasOne("Vision.Core.Models.Commissions.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId");
                });

            modelBuilder.Entity("Vision.Core.Models.User.ApplicationUser", b =>
                {
                    b.HasOne("Vision.Core.Models.Locations.CorporateOffice")
                        .WithMany("Employees")
                        .HasForeignKey("CorporateOfficeId");

                    b.HasOne("Vision.Core.Models.Locations.RetailStore")
                        .WithMany("SalesReps")
                        .HasForeignKey("RetailStoreId");
                });
#pragma warning restore 612, 618
        }
    }
}
